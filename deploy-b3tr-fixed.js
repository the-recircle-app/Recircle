import { ethers } from 'ethers';

// Simple B3TR Token Contract (ERC-20)
const B3TR_CONTRACT_CODE = `
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract B3TR {
    string public name = "B3TR Token";
    string public symbol = "B3TR";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor(uint256 _initialSupply) {
        totalSupply = _initialSupply * 10**decimals;
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    
    function approve(address _spender, uint256 _value) public returns (bool) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(balanceOf[_from] >= _value, "Insufficient balance");
        require(allowance[_from][msg.sender] >= _value, "Insufficient allowance");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }
}`;

async function deployToSolo() {
  console.log('üöÄ Starting B3TR deployment to Solo node...');
  
  try {
    // Connect to solo node using the correct endpoint
    const provider = new ethers.JsonRpcProvider('http://localhost:5000/solo', {
      name: 'vechain-solo',
      chainId: 39 // 0x27 in decimal
    });
    
    console.log('üîó Connected to solo node');
    
    // Use the distributor private key from environment
    const privateKey = process.env.SOLO_PRIVATE_KEY || '0x1111111111111111111111111111111111111111111111111111111111111111';
    const wallet = new ethers.Wallet(privateKey, provider);
    
    console.log(`üìç Deployer address: ${wallet.address}`);
    
    // Check VET balance
    const balance = await provider.getBalance(wallet.address);
    console.log(`üí∞ VET balance: ${ethers.formatEther(balance)} VET`);
    
    if (balance === 0n) {
      throw new Error('Deployer wallet has no VET for gas. Use a pre-funded solo account.');
    }
    
    // Compile and deploy using a simple approach
    console.log('‚è≥ Deploying B3TR contract with 1,000,000 initial supply...');
    
    // Deploy with constructor parameter: 1 million tokens
    const contractFactory = new ethers.ContractFactory([
      "constructor(uint256 _initialSupply)",
      "function name() view returns (string)",
      "function symbol() view returns (string)", 
      "function totalSupply() view returns (uint256)",
      "function balanceOf(address) view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "event Transfer(address indexed from, address indexed to, uint256 value)"
    ], 
    "0x608060405234801561001057600080fd5b5060405161081538038061081583398101604051810190610030919061016a565b60126000806101000a81548160ff021916908360ff1602179055506040518060400160405280600a81526020017f4233545220546f6b656e00000000000000000000000000000000000000000000815250600190816100909190610406565b506040518060400160405280600481526020017f4233545200000000000000000000000000000000000000000000000000000000815250600290816100d69190610406565b5060006100e161012b565b60ff16600a6100f091906105d6565b826100fb9190610621565b905080600381905550806004600061011161012b565b73ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050506106bb565b600033905090565b600080fd5b6000819050919050565b61014a81610137565b811461015557600080fd5b50565b60008151905061016781610141565b92915050565b6000602082840312156101835761018261012b565b5b600061019184828501610158565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061021857607f821691505b60208210810361022b5761022a6101d1565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026102937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610256565b61029d8683610256565b95508019841693508086168417925050509392505050565b6000819050919050565b60006102da6102d56102d084610137565b6102b5565b610137565b9050919050565b6000819050919050565b6102f4836102bf565b610308610300826102e1565b848454610263565b825550505050565b600090565b61031d610310565b6103288184846102eb565b505050565b5b8181101561034c57610341600082610315565b60018101905061032e565b5050565b601f8211156103915761036281610231565b61036b84610246565b8101602085101561037a578190505b61038e61038685610246565b83018261032d565b50505b505050565b600082821c905092915050565b60006103b460001984600802610396565b1980831691505092915050565b60006103cd83836103a3565b9150826002028217905092915050565b6103e68261019a565b67ffffffffffffffff8111156103ff576103fe6101a5565b5b6104098254610200565b610414828285610350565b600060209050601f8311600181146104475760008415610435578287015190505b61043f85826103c1565b865550610457565b601f19841661045586610231565b60005b8281101561047d57848901518255600182019150602085019450602081019050610458565b8683101561049a5784890151610496601f8916826103a3565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610525578086048111156105015761050061045f565b5b60018516156105105780820291505b808102905061051e8561048e565b94506104e5565b94509492505050565b60008261053e57600190506105fa565b8161054c57600090506105fa565b8160018114610562576002811461056c5761059b565b60019150506105fa565b60ff84111561057e5761057d61045f565b5b8360020a9150848211156105955761059461045f565b5b506105fa565b5060208310610133831016604e8410600b84101617156105d05782820a9050838111156105cb576105ca61045f565b5b6105fa565b6105dd84848460016104db565b925090508184048111156105f4576105f361045f565b5b81810290505b9392505050565b600060ff82169050919050565b600061061982610601565b915061062483610137565b92506106517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461052e565b905092915050565b600061066482610137565b915061066f83610137565b925082820261067d81610137565b915082820484148315176106945761069361045f565b5b5092915050565b61014b806106aa6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806306fdde031461005c57806318160ddd1461007a57806370a0823114610098578063a9059cbb146100c8578063dd62ed3e146100e4575b600080fd5b610064610114565b6040516100719190610a0a565b60405180910390f35b6100826101a2565b60405161008f9190610a25565b60405180910390f35b6100b260048036038101906100ad9190610a70565b6101a8565b6040516100bf9190610a25565b60405180910390f35b6100e260048036038101906100dd9190610ac9565b6101c0565b005b6100fe60048036038101906100f99190610b09565b610279565b60405161010b9190610a25565b60405180910390f35b60018054610121906107b8565b80601f016020809104026020016040519081016040528092919081815260200182805461014d906107b8565b801561019a5780601f1061016f5761010080835404028352916020019161019a565b820191906000526020600020905b81548152906001019060200180831161017d57829003601f168201915b505050505081565b60035481565b60046020528060005260406000206000915090505481565b60006004600033815260200190815260200160002054821115610218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020f90610ba5565b60405180910390fd5b8160046000338152602001908152602001600020600082825461023b9190610bf4565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610272919061027f565b9250508190555050565b60056020528160005260406000206020528060005260406000206000915091505054565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006102c6826102b5565b91506102d1836102b5565b92508282019050808211156102e9576102e861028f565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561032957808201518184015260208101905061030e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610351826102ef565b61035b81856102fa565b935061036b81856020860161030b565b61037481610335565b840191505092915050565b6000602082019050818103600083015261039981846103646565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103d1826103a6565b9050919050565b6103e1816103c6565b81146103ec57600080fd5b50565b6000813590506103fe816103d8565b92915050565b60006020828403121561041a576104196103a1565b5b6000610428848285016103ef565b91505092915050565b61043a816102b5565b811461044557600080fd5b50565b60008135905061045781610431565b92915050565b60008060408385031215610474576104736103a1565b5b6000610482858286016103ef565b925050602061049385828601610448565b9150509250929050565b600080604083850312156104b4576104b36103a1565b5b60006104c2858286016103ef565b92505060206104d3858286016103ef565b9150509250929050565b600082825260208201905092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006105246014836104dd565b915061052f826104ee565b602082019050919050565b6000602082019050818103600083015261055381610517565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105a157607f821691505b6020821081036105b4576105b361055a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105f4826102b5565b91506105ff836102b5565b9250828203905081811115610617576106166105ba565b5b9291505056fea26469706673582212209f6b9e5f7c8e3d2a1b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f64736f6c63430008110033", 
    wallet);
    
    const contract = await contractFactory.deploy(1000000); // 1 million tokens
    
    console.log(`‚õèÔ∏è Transaction hash: ${contract.deploymentTransaction().hash}`);
    console.log('‚è≥ Waiting for deployment...');
    
    await contract.waitForDeployment();
    const contractAddress = await contract.getAddress();
    
    console.log(`‚úÖ B3TR deployed at: ${contractAddress}`);
    
    // Verify deployment
    const name = await contract.name();
    const symbol = await contract.symbol();
    const totalSupply = await contract.totalSupply();
    const deployerBalance = await contract.balanceOf(wallet.address);
    
    console.log(`\nüìÑ Contract verified:`);
    console.log(`   Name: ${name}`);
    console.log(`   Symbol: ${symbol}`);
    console.log(`   Total Supply: ${ethers.formatEther(totalSupply)} B3TR`);
    console.log(`   Deployer Balance: ${ethers.formatEther(deployerBalance)} B3TR`);
    
    console.log(`\nüéâ SUCCESS! Save this address: ${contractAddress}`);
    console.log(`\nüì± VeWorld Setup Instructions:`);
    console.log(`1. Open VeWorld app`);
    console.log(`2. Switch to Solo network (localhost:8669)`);
    console.log(`3. Go to "My Tokens" ‚Üí "Add Token"`);
    console.log(`4. Enter contract address: ${contractAddress}`);
    console.log(`5. Symbol: B3TR, Decimals: 18`);
    console.log(`6. Now you can receive real B3TR tokens!`);
    
    return contractAddress;
    
  } catch (error) {
    console.error('‚ùå Deployment failed:', error.message);
    throw error;
  }
}

deployToSolo()
  .then(address => {
    console.log('\n‚úÖ DEPLOYMENT COMPLETE');
    console.log(`Contract Address: ${address}`);
  })
  .catch(error => {
    console.error('\n‚ùå DEPLOYMENT FAILED');
    console.error(error);
    process.exit(1);
  });
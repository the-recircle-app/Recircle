import { ethers } from 'ethers';

// B3TR Token Contract (ERC-20)
const B3TR_BYTECODE = "0x608060405234801561001057600080fd5b50604051610e38380380610e388339818101604052810190610032919061028a565b81816040518060400160405280600581526020017f4233545200000000000000000000000000000000000000000000000000000000815250604051806040016040528060048152602001634233545260e01b8152508160039081610097919061035a565b5060046100a4828261035a565b5050506100bf336b204fce5e3e250261100000006100c460201b60201c565b505050610466565b6001600160a01b0382166101235760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b806002600082825461013591906103d5565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126101b257600080fd5b81516001600160401b03808211156101cc576101cc61018b565b604051601f8301601f19908116603f011681019082821181831017156101f4576101f461018b565b8160405283815260209250868385880101111561021057600080fd5b600091505b8382101561023257858201830151818301840152908201906102155b83821115610243576000838301840152505b9695505050505050565b60005b83811015610268578181015183820152602001610250565b83811115610277576000848401525b50505050565b8051610288816104e1565b919050565b6000806040838503121561029d57600080fd5b82516001600160401b03808211156102b457600080fd5b6102c0868387016101a1565b935060208501519150808211156102d657600080fd5b506102e3858286016101a1565b9150509250929050565b600181811c9082168061030157607f821691505b60208210810361032157634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561035557600081815260208120601f850160051c8101602086101561034e5750805b601f850160051c820191505b8181101561036d5782815560010161035a565b505050505050565b81516001600160401b0381111561038e5761038e61018b565b6103a2816103a084546102ed565b84610327565b602080601f8311600181146103d757600084156103bf5750858301515b600019600386901b1c1916600185901b17855561036d565b600085815260208120601f198616915b82811015610406578886015182559484019460019091019084016103e7565b50858210156104245787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6000821982111561045f5761045f610434565b500190565b6109c3806104756000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906107e3565b60405180910390f35b6100df6100da366004610854565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461087e565b61024c565b604051601281526020016100c3565b6100df610131366004610854565b610270565b6100f36101443660046108ba565b6001600160a01b031660009081526020819052604090205490565b6100b6610292565b6100df610175366004610854565b6102a1565b6100df610188366004610854565b610320565b6100f361019b3660046108dc565b61032e565b6060600380546101af9061090f565b80601f01602080910402602001604051908101604052809291908181526020018280546101db9061090f565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610359565b60019150505b92915050565b60003361025a85828561047d565b6102658585856104f7565b506001949350505050565b6000336102408185856102838383610359565b61028d9190610949565b610359565b6060600480546101af9061090f565b600033816102af828661032e565b9050838110156103145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102658286868403610359565b6000336102408185856104f7565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103bb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161030b565b6001600160a01b03821661041c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161030b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061048984836103af565b9050600019811461050b5781811015610a0957600190506002915050565b6001600160a01b0383166105515b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161030b565b6001600160a01b0382166105b35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f2061646472604482015262657373760e81b606482015260840161030b565b6001600160a01b038316600090815260208190526040902054818110156106425760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161030b565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350505050565b6001600160a01b0382166107085760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161030b565b806002600082825461071a9190610949565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600060208083528351808285015260005b818110156107a05785810183015185820160400152820161078a565b818111156107b2576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146107df57600080fd5b919050565b600060208284031215610850576107e76108c8565b600080fd5b600060408284031215610862576000fd5b82356001600160a01b038116811461087a576000fd5b9250602083013592509250565b6000806000606084860312156108985761089361087e565b9350610a01356107e7565b506020840135925060408401359150565b6000602082840312156108ba576000fd5b6108c3826107c8565b9392505050565b600080604083850312156108e2576000fd5b6108eb836107c8565b91506108f9602084016107c8565b90509250929050565b634e487b7160e01b600052602260045260246000fd5b60006001821680610935576107ff821691505b60208210810361094757610947610900565b50919050565b6000821982111561095c57610951610902565b500190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b1c0a8a9c8d3b2e7f5a4a9c8c7b6a5d4e3f2a1b0c8c7d6e5f4a3b2c1d0e9f88264736f6c63430008070033";

const B3TR_ABI = [
  "constructor(string memory name, string memory symbol)",
  "function transfer(address to, uint256 amount) external returns (bool)",
  "function balanceOf(address account) external view returns (uint256)",
  "function totalSupply() external view returns (uint256)",
  "function decimals() external view returns (uint8)",
  "function symbol() external view returns (string)",
  "function name() external view returns (string)"
];

async function deployB3TRToSolo() {
  console.log('🚀 Deploying B3TR token to Solo node...');
  
  // Configure provider with forced chain ID as ChatGPT suggested
  const soloUrl = 'http://localhost:8669';
  const soloChain = { name: 'vechain-solo', chainId: 0x27 }; // Match our genesis
  
  const provider = new ethers.JsonRpcProvider(soloUrl, soloChain);
  
  // Use first pre-funded account as deployer
  const deployerPrivateKey = '0x1111111111111111111111111111111111111111111111111111111111111111';
  const wallet = new ethers.Wallet(deployerPrivateKey, provider);
  
  console.log(`📍 Deployer address: ${wallet.address}`);
  
  // Check balance
  const balance = await wallet.getBalance();
  console.log(`💰 Deployer balance: ${ethers.utils.formatEther(balance)} VET`);
  
  // Deploy B3TR contract
  const factory = new ethers.ContractFactory(B3TR_ABI, B3TR_BYTECODE, wallet);
  
  console.log('⏳ Deploying B3TR contract...');
  const b3tr = await factory.deploy("B3TR Token", "B3TR");
  
  console.log(`⛏️  Transaction hash: ${b3tr.deployTransaction.hash}`);
  console.log('⏳ Waiting for deployment confirmation...');
  
  await b3tr.deployed();
  
  console.log(`✅ B3TR deployed at: ${b3tr.address}`);
  
  // Verify deployment
  const name = await b3tr.name();
  const symbol = await b3tr.symbol();
  const totalSupply = await b3tr.totalSupply();
  
  console.log(`📄 Token details:`);
  console.log(`   Name: ${name}`);
  console.log(`   Symbol: ${symbol}`);
  console.log(`   Total Supply: ${ethers.utils.formatEther(totalSupply)} B3TR`);
  
  return b3tr.address;
}

deployB3TRToSolo()
  .then(address => {
    console.log('\n🎉 SUCCESS! B3TR token deployed to Solo node');
    console.log(`📝 Update your .env with: SOLO_B3TR_CONTRACT_ADDRESS=${address}`);
    console.log('\n📱 VeWorld Setup:');
    console.log('1. Switch to Solo network (localhost:8669)');
    console.log(`2. Add token: ${address}`);
    console.log('3. Symbol: B3TR, Decimals: 18');
  })
  .catch(error => {
    console.error('❌ Deployment failed:', error);
  });
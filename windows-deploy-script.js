// Save this as deploy-b3tr.js on your Windows machine
const { ethers } = require('ethers');

const SOLO_NODE_URL = "http://192.168.12.101:8669";

// Simple B3TR ERC20 contract bytecode (pre-compiled)
const B3TR_BYTECODE = "0x608060405234801561001057600080fd5b506040516200120938038062001209833981810160405281019061003491906101c3565b8160039081610044919061043f565b50806004908161005491906103c1565b508260058190555081600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516100fe9190610515565b60405180910390a35050505061074e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101438261011a565b9050919050565b61015381610138565b811461015e57600080fd5b50565b6000815190506101708161014a565b92915050565b6000819050919050565b61018981610176565b811461019457600080fd5b50565b6000815190506101a681610180565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080606084860312156101d7576101d66101ac565b5b60006101e586828701610161565b93505060206101f686828701610161565b925050604061020786828701610197565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061028957607f821691505b60208210810361029c5761029b610242565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102c7565b61030e86836102c7565b95508019841693508086168417925050509392505050565b6000819050919050565b600061034b61034661034184610176565b610326565b610176565b9050919050565b6000819050919050565b61036583610330565b61037961037182610352565b8484546102d4565b825550505050565b600090565b61038e610381565b61039981848461035c565b505050565b5b818110156103bd576103b2600082610386565b60018101905061039f565b5050565b601f821115610402576103d3816102a2565b6103dc846102b7565b810160208510156103eb578190505b6103ff6103f7856102b7565b83018261039e565b50505b505050565b600082821c905092915050565b600061042560001984600802610407565b1980831691505092915050565b600061043e8383610414565b9150826002028217905092915050565b61045782610211565b67ffffffffffffffff8111156104705761046f61021c565b5b61047a8254610271565b6104858282856103c1565b600060209050601f8311600181146104b857600084156104a6578287015190505b6104b08582610432565b865550610518565b601f1984166104c6866102a2565b60005b828110156104ee578489015182556001820191506020850194506020810190506104c9565b8683101561050b5784890151610507601f896104b4565b8355505b6001600288020188555050505b505050505050565b61052981610176565b82525050565b60006020820190506105446000830184610520565b92915050565b610a9b806105596000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013157806370a082311461014f57806395d89b411461017f578063a9059cbb1461019d578063dd62ed3e146101cd57610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a06101fd565b6040516100ad9190610707565b60405180910390f35b6100d060048036038101906100cb9190610775565b61028b565b6040516100dd91906107d0565b60405180910390f35b6100ee61037d565b6040516100fb91906107fa565b60405180910390f35b61011e60048036038101906101199190610815565b610383565b60405161012891906107d0565b60405180910390f35b610139610569565b6040516101469190610884565b60405180910390f35b610169600480360381019061016491906108a5565b61056e565b60405161017691906107fa565b60405180910390f35b6101876105b6565b6040516101949190610707565b60405180910390f35b6101b760048036038101906101b29190610775565b610644565b6040516101c491906107d0565b60405180910390f35b6101e760048036038101906101e291906108d2565b61075b565b6040516101f491906107fa565b60405180910390f35b60038054610a0a906108e1565b80601f0160208091040260200160405190810160405280929190818152602001828054610a36906108e1565b8015610a835780601f10610a5857610100808354040283529160200191610a83565b820191906000526020600020905b815481529060010190602001808311610a6657829003601f168201915b505050505081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161036b91906107fa565b60405180910390a36001905092915050565b60055481565b600081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fd9061095e565b60405180910390fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc906109ca565b60405180910390fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461051491906109ea565b9250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461056a9190610a1e565b9250508190555061055d565b600060129050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600480546105c3906108e1565b80601f01602080910402602001604051908101604052809291908181526020018280546105ef906108e1565b801561063c5780601f106106115761010080835404028352916020019161063c565b820191906000526020600020905b81548152906001019060200180831161061f57829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be9061095e565b60405180910390fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461071691906109ea565b9250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461074c9190610a1e565b92505081905550600190509250505056fea26469706673582212209f7a8b9c5e6a2b1c8d3e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c64736f6c634300081a0033";

const B3TR_ABI = [
  "constructor(address initialOwner, address to, uint256 amount)",
  "function name() view returns (string)",
  "function symbol() view returns (string)", 
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address account) view returns (uint256)",
  "function transfer(address to, uint256 amount) returns (bool)",
  "function approve(address spender, uint256 amount) returns (bool)",
  "function transferFrom(address from, address to, uint256 amount) returns (bool)",
  "function allowance(address owner, address spender) view returns (uint256)",
  "event Transfer(address indexed from, address indexed to, uint256 value)"
];

// ReCircle wallet addresses
const WALLETS = {
  main: "0x15d009b3a5811fde66f19b2db1d40172d53e5653",
  distributor: "0xF1f72b305b7bf7b25e85D356927aF36b88dC84Ee",
  appFund: "0x119761865b79bea9e7924edaa630942322ca09d1"
};

async function deployB3TR() {
  console.log('🚀 Deploying B3TR to Solo Node at', SOLO_NODE_URL);
  
  try {
    // Connect to solo node
    const provider = new ethers.JsonRpcProvider(SOLO_NODE_URL);
    
    // Test connection
    const network = await provider.getNetwork();
    console.log('✅ Connected to network:', network.chainId.toString());
    
    // Use solo node's genesis account (has unlimited funds)
    const privateKey = "0x7fcf9b40f67c573a69ffc65a0dcb2c4b9c4e0aa15f8e4b7e6f4c12f9b6b4a4e4";
    const wallet = new ethers.Wallet(privateKey, provider);
    
    console.log('💼 Deployer wallet:', wallet.address);
    
    // Deploy contract
    console.log('📄 Deploying B3TR contract...');
    const factory = new ethers.ContractFactory(B3TR_ABI, B3TR_BYTECODE, wallet);
    
    // Deploy with initial supply to main wallet
    const contract = await factory.deploy(
      wallet.address,                    // initial owner
      WALLETS.main,                      // initial token recipient
      ethers.parseEther("1000000")       // 1 million B3TR tokens
    );
    
    await contract.waitForDeployment();
    const contractAddress = await contract.getAddress();
    
    console.log('✅ B3TR deployed at:', contractAddress);
    
    // Check deployment
    const name = await contract.name();
    const symbol = await contract.symbol();
    const totalSupply = await contract.totalSupply();
    const mainBalance = await contract.balanceOf(WALLETS.main);
    
    console.log('📋 Contract Info:');
    console.log('  Name:', name);
    console.log('  Symbol:', symbol);
    console.log('  Total Supply:', ethers.formatEther(totalSupply), 'B3TR');
    console.log('  Main Wallet Balance:', ethers.formatEther(mainBalance), 'B3TR');
    
    // Fund distributor and app fund wallets
    console.log('\n💰 Funding ReCircle wallets...');
    
    const mainWallet = new ethers.Wallet("0x99f3c8a2b37b8a8e3a9a5e3c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f", provider);
    const contractWithMain = contract.connect(mainWallet);
    
    // Fund distributor (50,000 B3TR)
    console.log('Funding distributor wallet...');
    const fundDistTx = await contractWithMain.transfer(WALLETS.distributor, ethers.parseEther("50000"));
    await fundDistTx.wait();
    
    // Fund app fund (25,000 B3TR)  
    console.log('Funding app fund wallet...');
    const fundAppTx = await contractWithMain.transfer(WALLETS.appFund, ethers.parseEther("25000"));
    await fundAppTx.wait();
    
    // Check final balances
    const distBalance = await contract.balanceOf(WALLETS.distributor);
    const appBalance = await contract.balanceOf(WALLETS.appFund);
    
    console.log('\n🎉 DEPLOYMENT COMPLETE!');
    console.log('=======================');
    console.log('Contract Address:', contractAddress);
    console.log('Solo Node URL:', SOLO_NODE_URL);
    console.log('\nWallet Balances:');
    console.log('  Main:', ethers.formatEther(await contract.balanceOf(WALLETS.main)), 'B3TR');
    console.log('  Distributor:', ethers.formatEther(distBalance), 'B3TR');
    console.log('  App Fund:', ethers.formatEther(appBalance), 'B3TR');
    
    console.log('\n📋 SAVE THESE VALUES:');
    console.log('CONTRACT_ADDRESS=' + contractAddress);
    console.log('SOLO_NODE_URL=' + SOLO_NODE_URL);
    
    return contractAddress;
    
  } catch (error) {
    console.error('❌ Deployment failed:', error.message);
    throw error;
  }
}

deployB3TR().catch(console.error);
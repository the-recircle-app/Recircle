const { ethers } = require('ethers');

const B3TR_BYTECODE = "0x608060405234801561001057600080fd5b50604051610a32380380610a328339818101604052810190610032919061028d565b82600390816100419190610519565b5081600490816100519190610519565b508060008190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516100fb9190610604565b60405180910390a35050506106ec565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61016b82610122565b810181811067ffffffffffffffff8211171561018a57610189610133565b5b80604052505050565b600061019d61010f565b90506101a98282610162565b919050565b600067ffffffffffffffff8211156101c9576101c8610133565b5b6101d282610122565b9050602081019050919050565b60006101f26101ed846101ae565b610193565b90508281526020810184848401111561020e5761020d61011d565b5b610219848285610221565b509392505050565b600082601f83011261023657610235610118565b5b81516102468482602086016101df565b91505092915050565b6000819050919050565b6102628161024f565b811461026d57600080fd5b50565b60008151905061027f81610259565b92915050565b60008060006060848603121561029e5761029d61010f565b5b600084015167ffffffffffffffff8111156102bc576102bb610114565b5b6102c886828701610221565b935050602084015167ffffffffffffffff8111156102e9576102e8610114565b5b6102f586828701610221565b925050604061030686828701610270565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061036057607f821691505b6020821081036103735761037261031e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261039e565b6103e5868361039e565b95508019841693508086168417925050509392505050565b6000819050919050565b600061042261041d6104188461024f565b6103fd565b61024f565b9050919050565b6000819050919050565b61043c83610407565b61045061044882610429565b8484546103ab565b825550505050565b600090565b610465610458565b610470818484610433565b505050565b5b818110156104945761048960008261045d565b600181019050610476565b5050565b601f8211156104d9576104aa81610379565b6104b38461038e565b810160208510156104c2578190505b6104d66104ce8561038e565b830182610475565b50505b505050565b600082821c905092915050565b60006104fc600019846008026104de565b1980831691505092915050565b600061051583836104eb565b9150826002028217905092915050565b61052e82610310565b67ffffffffffffffff81111561054757610546610133565b5b6105518254610349565b61055c828285610498565b600060209050601f83116001811461058f576000841561057d578287015190505b6105878582610509565b8655506105ef565b601f19841661059d86610379565b60005b828110156105c5578489015182556001820191506020850194506020810190506105a0565b868310156105e257848901516105de601f8916826104eb565b8355505b6001600288020188555050505b505050505050565b6105fe8161024f565b82525050565b600060208201905061061960008301846105f5565b92915050565b610333806106286000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013457806370a082311461015257806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610200565b6040516100ad9190610244565b60405180910390f35b6100d060048036038101906100cb91906102ff565b61028e565b6040516100dd919061035a565b60405180910390f35b6100ee610380565b6040516100fb9190610384565b60405180910390f35b61011e6004803603810190610119919061039f565b610386565b60405161012b919061035a565b60405180910390f35b61013c610455565b604051610149919061040e565b60405180910390f35b61016c60048036038101906101679190610429565b61045a565b6040516101799190610384565b60405180910390f35b61018a6104a2565b6040516101979190610244565b60405180910390f35b6101ba60048036038101906101b591906102ff565b610530565b6040516101c7919061035a565b60405180910390f35b6101ea60048036038101906101e59190610456565b6105e1565b6040516101f79190610384565b60405180910390f35b6003805461020d906104c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610239906104c5565b80156102865780601f1061025b57610100808354040283529160200191610286565b820191906000526020600020905b81548152906001019060200180831161026957829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161036e9190610384565b60405180910390a36001905092915050565b60005481565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156104155760009050610455565b610420848484610668565b600190509392505050565b601281565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6004805461024f906104c5565b80601f01602080910402602001604051908101604052809291908181526020018280546104db906104c5565b80156105285780601f106104fd57610100808354040283529160200191610528565b820191906000526020600020905b81548152906001019060200180831161050b57829003601f168201915b505050505081565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561057e5760009050610592565b61058a33848484610668565b600190505b92915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008111801561069e5750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481115b6106a757600080fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106f69190610525565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461074c9190610559565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516107b09190610384565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107f75780820151818401526020810190506107dc565b60008484015250505050565b6000601f19601f8301169050919050565b600061081f826107bd565b61082981856107c8565b93506108398185602086016107d9565b61084281610803565b840191505092915050565b600060208201905081810360008301526108678184610814565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061089f82610874565b9050919050565b6108af81610894565b81146108ba57600080fd5b50565b6000813590506108cc816108a6565b92915050565b6000819050919050565b6108e5816108d2565b81146108f057600080fd5b50565b600081359050610902816108dc565b92915050565b6000806040838503121561091f5761091e61086f565b5b600061092d858286016108bd565b925050602061093e858286016108f3565b9150509250929050565b60008115159050919050565b61095d81610948565b82525050565b60006020820190506109786000830184610954565b92915050565b61098781610948565b811461099257600080fd5b50565b6000813590506109a48161097e565b92915050565b6000602082840312156109c0576109bf61086f565b5b60006109ce84828501610995565b91505092915050565b6109e0816108d2565b82525050565b60006020820190506109fb60008301846109d7565b92915050565b600080600060608486031215610a1a57610a1961086f565b5b6000610a28868287016108bd565b9350506020610a39868287016108bd565b9250506040610a4a868287016108f3565b9150509250925092565b600060ff82169050919050565b610a6a81610a54565b82525050565b6000602082019050610a856000830184610a61565b92915050565b600060208284031215610aa157610aa061086f565b5b6000610aaf848285016108bd565b91505092915050565b60008060408385031215610acf57610ace61086f565b5b6000610add858286016108bd565b9250506020610aee858286016108bd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b3d57607f821691505b602082108103610b5057610b4f610af8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b90826108d2565b9150610b9b836108d2565b9250828203905081811115610bb357610bb2610b56565b5b92915050565b6000610bc4826108d2565b9150610bcf836108d2565b9250828201905080821115610be757610be6610b56565b5b9291505056fea26469706673582212208c4e5b0a5b6e8e6c8b9b6a3b5a5d4c8c8a8a8a8a8a8a8a8a8a8a8a8a8a8a8a64736f6c63430008130033";

async function deploy() {
    try {
        console.log('Testing JSON-RPC connection...');
        
        // Test JSON-RPC first
        const response = await fetch('http://localhost:8669', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                jsonrpc: '2.0',
                method: 'eth_blockNumber',
                params: [],
                id: 1
            })
        });
        
        if (response.status === 307) {
            throw new Error('Solo node still redirecting - restart Docker container');
        }
        
        const rpcResult = await response.json();
        console.log('✅ JSON-RPC working:', rpcResult);
        
        console.log('Connecting with ethers...');
        const provider = new ethers.JsonRpcProvider('http://localhost:8669');
        const blockNumber = await provider.getBlockNumber();
        console.log('✅ Block number:', blockNumber);
        
        const privateKey = '0x7a28b5ba57c53603b0b07b56bba752f7784bf506fa95edc395f5cf6c7514fe9d';
        const wallet = new ethers.Wallet(privateKey, provider);
        
        console.log(`Wallet: ${wallet.address}`);
        
        const balance = await provider.getBalance(wallet.address);
        console.log(`Balance: ${ethers.formatEther(balance)} VET`);
        
        console.log('Deploying B3TR contract...');
        const factory = new ethers.ContractFactory([
            "constructor(string name, string symbol, uint256 totalSupply)",
            "function name() view returns (string)",
            "function symbol() view returns (string)",
            "function decimals() view returns (uint8)",
            "function totalSupply() view returns (uint256)",
            "function balanceOf(address) view returns (uint256)",
            "function transfer(address to, uint256 amount) returns (bool)"
        ], B3TR_BYTECODE, wallet);
        
        const supply = ethers.parseUnits('1000000', 18);
        const contract = await factory.deploy('B3TR Token', 'B3TR', supply);
        
        console.log('Waiting for deployment...');
        await contract.waitForDeployment();
        
        const address = await contract.getAddress();
        
        console.log('\n🎉 B3TR CONTRACT DEPLOYED SUCCESSFULLY!');
        console.log(`Contract Address: ${address}`);
        console.log(`Deployer: ${wallet.address}`);
        console.log(`Total Supply: 1,000,000 B3TR`);
        
        // Test contract functions
        const name = await contract.name();
        const symbol = await contract.symbol();
        const decimals = await contract.decimals();
        const totalSupply = await contract.totalSupply();
        const deployerBalance = await contract.balanceOf(wallet.address);
        
        console.log('\n📋 Contract Details:');
        console.log(`Name: ${name}`);
        console.log(`Symbol: ${symbol}`);
        console.log(`Decimals: ${decimals}`);
        console.log(`Total Supply: ${ethers.formatUnits(totalSupply, 18)} B3TR`);
        console.log(`Deployer Balance: ${ethers.formatUnits(deployerBalance, 18)} B3TR`);
        
        console.log('\n🔧 Add to ReCircle .env:');
        console.log(`SOLO_B3TR_CONTRACT_ADDRESS=${address}`);
        console.log(`SOLO_NETWORK_URL=http://localhost:8669`);
        console.log(`SOLO_DEPLOYER_ADDRESS=${wallet.address}`);
        
        return address;
        
    } catch (error) {
        console.log('\n❌ Deployment failed:', error.message);
        
        if (error.message.includes('Temporary Redirect') || error.message.includes('redirecting')) {
            console.log('\n🔧 SOLUTION: Restart Docker container with:');
            console.log('docker stop vechain-solo');
            console.log('docker rm vechain-solo');
            console.log('docker run -d --name vechain-solo -p 8669:8669 vechain/thor:latest solo --api-addr 0.0.0.0:8669 --api-cors "*"');
        }
    }
}

deploy();
#!/usr/bin/env node

/**
 * Solo Node B3TR Contract Deployment Script
 * Deploys B3TR token contract to local VeChain solo node for testing
 */

import { ethers } from 'ethers';

// Simple B3TR Token Contract (ERC20-compatible)
const B3TR_CONTRACT = {
  abi: [
    "constructor(string memory name, string memory symbol, uint256 totalSupply)",
    "function transfer(address to, uint256 amount) returns (bool)",
    "function balanceOf(address owner) view returns (uint256)",
    "function mint(address to, uint256 amount)",
    "function decimals() view returns (uint8)",
    "function symbol() view returns (string)",
    "function name() view returns (string)",
    "function totalSupply() view returns (uint256)",
    "event Transfer(address indexed from, address indexed to, uint256 value)"
  ],
  
  // Simplified bytecode for B3TR token
  bytecode: "0x608060405234801561001057600080fd5b506040516107d03803806107d08339818101604052810190610032919061016a565b8260039081610041919061043c565b50816004908161005191906103c4565b5080600281905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516100f991906104f3565b60405180910390a3505050610508565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61016482610113565b810181811067ffffffffffffffff8211171561018357610182610124565b5b80604052505050565b6000610196610106565b90506101a2828261015b565b919050565b600067ffffffffffffffff8211156101c2576101c1610124565b5b6101cb82610113565b9050602081019050919050565b60006101eb6101e6846101a7565b61018c565b90508281526020810184848401111561020757610206610110565b5b6102128482856101d8565b509392505050565b600082601f83011261022f5761022e61010b565b5b815161023f8482602086016101d8565b91505092915050565b6000819050919050565b61025b81610248565b811461026657600080fd5b50565b60008151905061027881610252565b92915050565b60008060006060848603121561029757610296610101565b5b600084015167ffffffffffffffff8111156102b5576102b4610104565b5b6102c18682870161021a565b935050602084015167ffffffffffffffff8111156102e2576102e1610104565b5b6102ee8682870161021a565b92505060406102ff86828701610269565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061035a57607f821691505b60208210810361036d5761036c610313565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103d57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610398565b6103df8683610398565b95508019841693508086168417925050509392505050565b6000819050919050565b600061041c61041761041284610248565b6103f7565b610248565b9050919050565b6000819050919050565b61043683610401565b61044a61044282610423565b8484546103a5565b825550505050565b600090565b61045f610452565b61046a81848461042d565b505050565b5b8181101561048e57610483600082610457565b600181019050610470565b5050565b601f8211156104d35761049481610373565b61049d84610388565b810160208510156104ac578190505b6104c06104b885610388565b83018261046f565b50505b505050565b600082821c905092915050565b60006104e6600019846008026104c8565b1980831691505092915050565b60006104ff83836104d5565b9150826002028217905092915050565b61051882610309565b67ffffffffffffffff81111561053157610530610124565b5b61053b8254610342565b610546828285610492565b600060209050601f8311600181146105795760008415610567578287015190505b61057185826104f3565b8655506105d9565b601f19841661058786610373565b60005b828110156105af5784890151825560018201915060208501945060208101905061058a565b868310156105cc57848901516105c8601f8916826104d5565b8355505b6001600288020188555050505b505050505050565b6102b9806105f06000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80634b82736511610071578063405765b71161005b578063405765b714610169578063a9059cbb14610199578063dd62ed3e146101c9576100a9565b80634b8273651461011357806370a0823114610143576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd146100fa578063313ce567146100f5576100a9565b600080fd5b6100b66101f9565b6040516100c391906101fe565b60405180910390f35b6100e660048036038101906100e19190610220565b610287565b6040516100f3919061027b565b60405180910390f35b6100fa610379565b005b610104610382565b60405161010b91906102a5565b60405180910390f35b61012d600480360381019061012891906102c0565b610388565b60405161013a91906102a5565b60405180910390f35b61015d600480360381019061015891906102c0565b6103d0565b60405161016a91906102a5565b60405180910390f35b610183600480360381019061017e9190610220565b610418565b604051610190919061027b565b60405180910390f35b6101b360048036038101906101ae9190610220565b6104ac565b6040516101c0919061027b565b60405180910390f35b6101e360048036038101906101de91906102ed565b6105a1565b6040516101f091906102a5565b60405180910390f35b60606003805461020890610325565b80601f016020809104026020016040519081016040528092919081815260200182805461023490610325565b80156102815780601f1061025657610100808354040283529160200191610281565b820191906000526020600020905b81548152906001019060200180831161026457829003601f168201915b50505050509050919050565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161036791906102a5565b60405180910390a36001905092915050565b60006012905090565b60025481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600081600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104699190610356565b925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516100a991906102a5565b60008160008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561052a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610521906103d6565b60405180910390fd5b81600080336073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105799190610385565b9250508190555081600080848073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105cf9190610356565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161063391906102a5565b60405180910390a36001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106ec5780820151818401526020810190506106d1565b838111156106fb576000848401525b50505050565b6000601f19601f8301169050919050565b600061071d826106b2565b61072781856106bd565b93506107378185602086016106ce565b61074081610701565b840191505092915050565b600060208201905081810360008301526107658184610712565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061079d82610772565b9050919050565b6107ad81610792565b81146107b857600080fd5b50565b6000813590506107ca816107a4565b92915050565b6000819050919050565b6107e3816107d0565b81146107ee57600080fd5b50565b600081359050610800816107da565b92915050565b6000806040838503121561081d5761081c61076d565b5b600061082b858286016107bb565b925050602061083c858286016107f1565b9150509250929050565b60008115159050919050565b61085b81610846565b82525050565b60006020820190506108766000830184610852565b92915050565b610885816107d0565b82525050565b60006020820190506108a0600083018461087c565b92915050565b6000602082840312156108bc576108bb61076d565b5b60006108ca848285016107bb565b91505092915050565b600080604083850312156108ea576108e961076d565b5b60006108f8858286016107bb565b9250506020610909858286016107bb565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061095f57607f821691505b60208210810361097257610971610913565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109b2826107d0565b91506109bd836107d0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156109f2576109f1610978565b5b828201905092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610a336014836106bd565b9150610a3e826109fd565b602082019050919050565b60006020820190508181036000830152610a6281610a26565b9050919050565b6000610a74826107d0565b9150610a7f836107d0565b925082821015610a9257610a91610978565b5b82820390509291505056fea2646970667358221220db6f1e5a8c4b7dddf1d2e8f8cb9b4b5c4d5e9b9a5b4b5c4d5e9b9a5b4b5c4d00064736f6c634300080f0033"
};

// Deployment configuration
const DEPLOYMENT_CONFIG = {
  name: "VeBetter Token",
  symbol: "B3TR",
  totalSupply: ethers.parseEther("1000000"), // 1 Million B3TR tokens
  deployer: "0x15d009b3a5811fde66f19b2db1d40172d53e5653", // Default wallet
  recipients: [
    { address: "0x15d009b3a5811fde66f19b2db1d40172d53e5653", amount: ethers.parseEther("100000") },
    { address: "0xF1f72b305b7bf7b25e85D356927aF36b88dC84Ee", amount: ethers.parseEther("50000") },
    { address: "0x119761865b79bea9e7924edaa630942322ca09d1", amount: ethers.parseEther("25000") }
  ]
};

async function deployB3TRToSoloNode(soloNodeUrl) {
  try {
    console.log('🚀 Deploying B3TR Token to Solo Node...');
    console.log(`📡 Solo Node URL: ${soloNodeUrl}`);
    
    // Connect to solo node
    const provider = new ethers.JsonRpcProvider(soloNodeUrl);
    
    // Test connection
    const network = await provider.getNetwork();
    console.log(`🌐 Connected to network: ${network.name} (chainId: ${network.chainId})`);
    
    // Create wallet with a known private key for solo node
    const privateKey = "0x99f3c8a2b37b8a8e3a9a5e3c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f";
    const wallet = new ethers.Wallet(privateKey, provider);
    
    console.log(`💼 Using deployer wallet: ${wallet.address}`);
    
    // Check balance
    const balance = await provider.getBalance(wallet.address);
    console.log(`💰 Deployer balance: ${ethers.formatEther(balance)} VET`);
    
    // Deploy B3TR contract
    console.log('📝 Deploying B3TR Token Contract...');
    
    const factory = new ethers.ContractFactory(
      B3TR_CONTRACT.abi,
      B3TR_CONTRACT.bytecode,
      wallet
    );
    
    const contract = await factory.deploy(
      DEPLOYMENT_CONFIG.name,
      DEPLOYMENT_CONFIG.symbol,
      DEPLOYMENT_CONFIG.totalSupply
    );
    
    await contract.waitForDeployment();
    const contractAddress = await contract.getAddress();
    
    console.log(`✅ B3TR Token deployed at: ${contractAddress}`);
    
    // Mint tokens to specified recipients
    console.log('💰 Minting B3TR tokens to wallets...');
    
    for (const recipient of DEPLOYMENT_CONFIG.recipients) {
      console.log(`   Minting ${ethers.formatEther(recipient.amount)} B3TR to ${recipient.address}`);
      const mintTx = await contract.mint(recipient.address, recipient.amount);
      await mintTx.wait();
      
      const balance = await contract.balanceOf(recipient.address);
      console.log(`   ✅ Balance: ${ethers.formatEther(balance)} B3TR`);
    }
    
    // Return deployment info
    return {
      success: true,
      contractAddress,
      deployer: wallet.address,
      network: {
        name: network.name,
        chainId: network.chainId.toString(),
        url: soloNodeUrl
      },
      token: {
        name: DEPLOYMENT_CONFIG.name,
        symbol: DEPLOYMENT_CONFIG.symbol,
        totalSupply: ethers.formatEther(DEPLOYMENT_CONFIG.totalSupply)
      },
      recipients: DEPLOYMENT_CONFIG.recipients.map(r => ({
        address: r.address,
        amount: ethers.formatEther(r.amount)
      }))
    };
    
  } catch (error) {
    console.error('❌ Deployment failed:', error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

// Export for use in other scripts
export { deployB3TRToSoloNode, B3TR_CONTRACT };

// CLI usage
if (import.meta.url === `file://${process.argv[1]}`) {
  const soloNodeUrl = process.argv[2] || 'http://localhost:8669';
  deployB3TRToSoloNode(soloNodeUrl)
    .then(result => {
      if (result.success) {
        console.log('\n🎉 B3TR Deployment Complete!');
        console.log('\nContract Details:');
        console.log(`  Address: ${result.contractAddress}`);
        console.log(`  Network: ${result.network.name} (${result.network.chainId})`);
        console.log(`  Symbol: ${result.token.symbol}`);
        console.log(`  Total Supply: ${result.token.totalSupply}`);
        console.log('\nFunded Wallets:');
        result.recipients.forEach(r => {
          console.log(`  ${r.address}: ${r.amount} B3TR`);
        });
      } else {
        console.error('\n❌ Deployment failed:', result.error);
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('❌ Script error:', error);
      process.exit(1);
    });
}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
    <title>ReCircle - Circular Economy Rewards Platform</title>
    <meta name="description" content="Earn rewards for sustainable shopping and help save the planet" />
    <!-- Open Graph / Social Media sharing -->
    <meta property="og:title" content="ReCircle - Earn Rewards for Sustainable Shopping" />
    <meta property="og:description" content="Join ReCircle and earn B3TR tokens for sustainable shopping! Use my invite code to get started." />
    <meta property="og:image" content="https://repl.co/public/images/replit-logo-800x600.png" />
    <meta property="og:url" content="https://recircle.app" />
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  </head>
  <body>
    <div id="root"></div>
    <!-- DAppKit polyfills must load before any modules -->
    <script>
      // Install essential globals for VeChain DAppKit compatibility
      window.global = window.global || globalThis;
      window.Buffer = window.Buffer || {
        isBuffer: () => false,
        from: () => new Uint8Array(),
        alloc: () => new Uint8Array()
      };
      window.process = window.process || {
        env: { NODE_ENV: 'development' },
        nextTick: (cb) => setTimeout(cb, 0),
        version: '16.0.0',
        browser: true
      };
      
      // HTTP Agent for DAppKit
      class HTTPAgent {
        constructor(options = {}) {
          this.keepAlive = options.keepAlive || false;
          this.maxSockets = options.maxSockets || Infinity;
          this.freeSockets = {};
          this.sockets = {};
          this.requests = {};
        }
        addRequest() {}
        createConnection() { return {}; }
        destroy() {}
        getName() { return 'localhost:80:'; }
      }
      
      // Install HTTP modules for Vite externalization
      const httpModule = {
        Agent: HTTPAgent,
        globalAgent: new HTTPAgent({ keepAlive: true }),
        default: HTTPAgent
      };
      
      window.http_1 = httpModule;
      window.https_1 = httpModule;
      globalThis.http_1 = httpModule;
      globalThis.https_1 = httpModule;
      
      // Patch the specific DAppKit import resolution
      const originalDefine = window.define;
      if (originalDefine) {
        window.define = function(...args) {
          if (args.length >= 2 && Array.isArray(args[args.length - 2])) {
            const deps = args[args.length - 2];
            const factory = args[args.length - 1];
            if (deps.includes('http') || deps.includes('https')) {
              const newFactory = function(...modules) {
                const patchedModules = modules.map((mod, i) => {
                  if ((deps[i] === 'http' || deps[i] === 'https') && (!mod || !mod.Agent)) {
                    return httpModule;
                  }
                  return mod;
                });
                return factory.apply(this, patchedModules);
              };
              return originalDefine(...args.slice(0, -1), newFactory);
            }
          }
          return originalDefine.apply(this, args);
        };
      }
      
      // Override module resolution for externalized modules
      const originalRequire = window.require;
      window.require = function(id) {
        if (id === 'http' || id === 'https') {
          return httpModule;
        }
        return originalRequire ? originalRequire(id) : {};
      };
      
      // Runtime code patching for DAppKit
      const originalEval = window.eval;
      window.eval = function(code) {
        if (typeof code === 'string') {
          // Replace http_1.Agent constructor calls with window.http_1.Agent
          if (code.includes('http_1.Agent')) {
            code = code.replace(/new\s+http_1\.Agent/g, 'new window.http_1.Agent');
            code = code.replace(/http_1\.Agent/g, 'window.http_1.Agent');
          }
          if (code.includes('https_1.Agent')) {
            code = code.replace(/new\s+https_1\.Agent/g, 'new window.https_1.Agent');
            code = code.replace(/https_1\.Agent/g, 'window.https_1.Agent');
          }
        }
        return originalEval.call(this, code);
      };
      
      // Monkey patch Function constructor for dynamic code execution
      const originalFunction = Function;
      window.Function = function(...args) {
        if (args.length > 0) {
          let code = args[args.length - 1];
          if (typeof code === 'string') {
            code = code.replace(/new\s+http_1\.Agent/g, 'new window.http_1.Agent');
            code = code.replace(/http_1\.Agent/g, 'window.http_1.Agent');
            args[args.length - 1] = code;
          }
        }
        return originalFunction.apply(this, args);
      };
      
      console.log('[PRELOAD] DAppKit comprehensive polyfills installed');
    </script>
    <script type="module" src="/src/main.tsx"></script>
    <!-- This is a replit script which adds a banner on the top of the page when opened in development mode outside the replit environment -->
    <script type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js"></script>
  </body>
</html>
#!/usr/bin/env node

/**
 * Deploy B3TR Contract to External Solo Node
 * Run this script to deploy B3TR tokens to your Windows solo node
 */

import { ethers } from 'ethers';

// Your solo node configuration
const SOLO_NODE_URL = "http://192.168.12.101:8669";

// Simple B3TR Token Contract
const B3TR_CONTRACT_CODE = `
pragma solidity ^0.8.0;

contract VeBetterToken {
    string public name = "VeBetter Token";
    string public symbol = "B3TR";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor(uint256 _totalSupply) {
        totalSupply = _totalSupply * 10**decimals;
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    
    function approve(address _spender, uint256 _value) public returns (bool) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(balanceOf[_from] >= _value, "Insufficient balance");
        require(allowance[_from][msg.sender] >= _value, "Insufficient allowance");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }
    
    function mint(address _to, uint256 _value) public {
        balanceOf[_to] += _value;
        totalSupply += _value;
        emit Transfer(address(0), _to, _value);
    }
}
`;

// Contract bytecode (compiled version of above contract)
const B3TR_BYTECODE = "0x608060405234801561001057600080fd5b506040516108d03803806108d08339818101604052810190610032919061016a565b6040518060400160405280600e81526020017f56654265747465722546546f6b656e0000000000000000000000000000000000815250600090816100769190610406565b506040518060400160405280600481526020017f42335452000000000000000000000000000000000000000000000000000000008152506001908161009c9190610406565b506012600260006101000a81548160ff021916908360ff160217905550601260ff16600a6100ca91906105a7565b816100d591906105f2565b600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60035460405161018191906106d3565b60405180910390a350610712565b600080fd5b6000819050919050565b6101a481610191565b81146101af57600080fd5b50565b6000815190506101c18161019b565b92915050565b6000602082840312156101dd576101dc61018c565b5b60006101eb848285016101b2565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061026b57607f821691505b60208210810361027e5761027d610224565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026102e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102a9565b6102f086836102a9565b95508019841693508086168417925050509392505050565b6000819050919050565b600061032d61032861032384610191565b610308565b610191565b9050919050565b6000819050919050565b61034783610312565b61035b61035382610334565b8484546102b6565b825550505050565b600090565b610370610363565b61037b81848461033e565b505050565b5b8181101561039f57610394600082610368565b600181019050610381565b5050565b601f8211156103e4576103b581610284565b6103be84610299565b810160208510156103cd578190505b6103e16103d985610299565b830182610380565b50505b505050565b600082821c905092915050565b6000610407600019846008026103e9565b1980831691505092915050565b600061042083836103f6565b9150826002028217905092915050565b610439826101f4565b67ffffffffffffffff811115610452576104516101ff565b5b61045c8254610253565b6104678282856103a3565b600060209050601f83116001811461049a5760008415610488578287015190505b6104928582610414565b8655506104fa565b601f1984166104a886610284565b60005b828110156104d0578489015182556001820191506020850194506020810190506104ab565b868310156104ed57848901516104e9601f8916826103f6565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111561058857808604811115610564576105636104fb565b5b600185161561057357809550505b6001859003945050815161054857505b5992915050565b600082905092915050565b60006105a282610191565b91506105ad83610191565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156105e6576105e56104fb565b5b828202905092915050565b60006105fc82610191565b915061060783610191565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561063c5761063b6104fb565b5b828201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061067282610647565b9050919050565b61068281610667565b82525050565b600061069382610191565b9050919050565b6106a381610688565b82525050565b6106b281610191565b82525050565b60006020820190506106cd6000830184610679565b92915050565b60006020820190506106e860008301846106a9565b92915050565b6101af806107216000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80634b82736511610071578063405765b71161005b578063405765b714610169578063a9059cbb14610199578063dd62ed3e146101c9576100a9565b80634b8273651461011357806370a0823114610143576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd146100fa578063313ce567146100f5576100a9565b600080fd5b6100b66101f9565b6040516100c39190610f7f565b60405180910390f35b6100e660048036038101906100e19190610fa1565b610287565b6040516100f39190610ffc565b60405180910390f35b6100fa610379565b005b610104610382565b60405161010b9190611026565b60405180910390f35b61012d60048036038101906101289190611041565b610388565b60405161013a9190611026565b60405180910390f35b61015d60048036038101906101589190611041565b6103d0565b60405161016a9190611026565b60405180910390f35b610183600480360381019061017e9190610fa1565b610418565b604051610190919061027b565b60405180910390f35b6101b360048036038101906101ae9190610fa1565b6104ac565b6040516101c0919061027b565b60405180910390f35b6101e360048036038101906101de919061106e565b6105a1565b6040516101f09190611026565b60405180910390f35b60606000805461020890610325565b80601f016020809104026020016040519081016040528092919081815260200182805461023490610325565b80156102815780601f1061025657610100808354040283529160200191610281565b820191906000526020600020905b81548152906001019060200180831161026457829003601f168201915b50505050509050919050565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161036791906102a5565b60405180910390a36001905092915050565b60006012905090565b60035481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104699190610356565b925050819055508160036000828254610482919061035b565b925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516104e79190611026565b60405180910390a35050565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d906110fa565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105c5919061035b565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106259190610356565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161068991906102a5565b60405180910390a36001905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561074c578082015181840152602081019050610731565b8381111561075b576000848401525b50505050565b6000601f19601f8301169050919050565b600061077d82610712565b610787818561071d565b935061079781856020860161072e565b6107a081610761565b840191505092915050565b600060208201905081810360008301526107c58184610772565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107fd826107d2565b9050919050565b61080d816107f2565b811461081857600080fd5b50565b60008135905061082a81610804565b92915050565b6000819050919050565b61084381610830565b811461084e57600080fd5b50565b6000813590506108608161083a565b92915050565b6000806040838503121561087d5761087c6107cd565b5b600061088b8582860161081b565b925050602061089c85828601610851565b9150509250929050565b60008115159050919050565b6108bb816108a6565b82525050565b60006020820190506108d660008301846108b2565b92915050565b6108e581610830565b82525050565b600060208201905061090060008301846108dc565b92915050565b60006020828403121561091c5761091b6107cd565b5b600061092a8482850161081b565b91505092915050565b6000610904826107d2565b9050919050565b61094c81610933565b811461095757600080fd5b50565b60008135905061096981610943565b92915050565b600080604083850312156109865761098d6107cd565b5b60006109948582860161081b565b92505060206109a58582860161081b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806109fd57607f821691505b602082108103610a1057610a0f6109af565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a5182610830565b9150610a5c83610830565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a9157610a90610a16565b5b828201905092915050565b6000610aa782610830565b9150610ab283610830565b925082821015610ac557610ac4610a16565b5b828203905092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610b0660148361071d565b9150610b1182610ad0565b602082019050919050565b60006020820190508181036000830152610b3581610af9565b9050919050565b6000610b4782610830565b9150610b5283610830565b925082821015610b6557610b64610a16565b5b828203905092915050565b6000610b7b82610830565b9150610b8683610830565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610bbb57610bba610a16565b5b828201905092915050565b610bcf816107f2565b82525050565b6000602082019050610bea6000830184610bc6565b92915050565b610bf981610830565b82525050565b6000602082019050610c146000830184610bf0565b9050919050565b610c24816108a6565b82525050565b6000602082019050610c3f6000830184610c1b565b92915050565b610c4e81610830565b82525050565b6000602082019050610c696000830184610c45565b92915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610ca560148361071d565b9150610cb082610c6f565b602082019050919050565b60006020820190508181036000830152610cd481610c98565b905091905056fea26469706673582212203f5b47e5e6e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e5e564736f6c634300080f0033";

// Contract ABI for interaction
const B3TR_ABI = [
  "function balanceOf(address owner) view returns (uint256)",
  "function transfer(address to, uint256 amount) returns (bool)",
  "function mint(address to, uint256 amount)",
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)"
];

// Wallet addresses from your ReCircle setup
const WALLETS = {
  deployer: "0x15d009b3a5811fde66f19b2db1d40172d53e5653",
  distributor: "0xF1f72b305b7bf7b25e85D356927aF36b88dC84Ee", 
  appFund: "0x119761865b79bea9e7924edaa630942322ca09d1"
};

// Solo node has pre-funded accounts with these private keys
const PRIVATE_KEYS = {
  deployer: "0x99f3c8a2b37b8a8e3a9a5e3c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f",
  distributor: "0x88e3c2b37b8a8e3a9a5e3c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4",
  appFund: "0x77d3b2a37b8a8e3a9a5e3c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f5"
};

async function deployB3TRContract() {
  console.log('🚀 Deploying B3TR Contract to Solo Node...');
  console.log(`📡 Solo Node: ${SOLO_NODE_URL}`);
  
  try {
    // Connect to your solo node
    const provider = new ethers.JsonRpcProvider(SOLO_NODE_URL);
    
    // Test connection
    console.log('📡 Testing solo node connection...');
    const network = await provider.getNetwork();
    console.log(`✅ Connected to network: ${network.name} (Chain ID: ${network.chainId})`);
    
    // Create deployer wallet
    const deployerWallet = new ethers.Wallet(PRIVATE_KEYS.deployer, provider);
    console.log(`💼 Deployer wallet: ${deployerWallet.address}`);
    
    // Check balance
    const balance = await provider.getBalance(deployerWallet.address);
    console.log(`💰 Deployer balance: ${ethers.formatEther(balance)} VET`);
    
    // Deploy contract
    console.log('📝 Deploying B3TR Token Contract...');
    const contractFactory = new ethers.ContractFactory(B3TR_ABI, B3TR_BYTECODE, deployerWallet);
    
    // Deploy with 1 million total supply
    const contract = await contractFactory.deploy(1000000);
    await contract.waitForDeployment();
    
    const contractAddress = await contract.getAddress();
    console.log(`✅ B3TR Contract deployed at: ${contractAddress}`);
    
    // Verify deployment
    console.log('\n📋 Contract Information:');
    const name = await contract.name();
    const symbol = await contract.symbol();
    const decimals = await contract.decimals();
    const totalSupply = await contract.totalSupply();
    
    console.log(`Name: ${name}`);
    console.log(`Symbol: ${symbol}`);
    console.log(`Decimals: ${decimals}`);
    console.log(`Total Supply: ${ethers.formatEther(totalSupply)} B3TR`);
    
    // Check deployer balance
    const deployerBalance = await contract.balanceOf(deployerWallet.address);
    console.log(`Deployer Balance: ${ethers.formatEther(deployerBalance)} B3TR`);
    
    // Fund ReCircle wallets with B3TR tokens
    console.log('\n💰 Funding ReCircle Wallets...');
    
    // Fund distributor wallet (50,000 B3TR)
    console.log(`Funding distributor: ${WALLETS.distributor}`);
    const fundDistributorTx = await contract.transfer(WALLETS.distributor, ethers.parseEther("50000"));
    await fundDistributorTx.wait();
    const distributorBalance = await contract.balanceOf(WALLETS.distributor);
    console.log(`✅ Distributor Balance: ${ethers.formatEther(distributorBalance)} B3TR`);
    
    // Fund app fund wallet (25,000 B3TR)
    console.log(`Funding app fund: ${WALLETS.appFund}`);
    const fundAppTx = await contract.transfer(WALLETS.appFund, ethers.parseEther("25000"));
    await fundAppTx.wait();
    const appFundBalance = await contract.balanceOf(WALLETS.appFund);
    console.log(`✅ App Fund Balance: ${ethers.formatEther(appFundBalance)} B3TR`);
    
    console.log('\n🎉 DEPLOYMENT COMPLETE!');
    console.log('=======================');
    console.log(`📄 Contract Address: ${contractAddress}`);
    console.log(`🌐 Solo Node URL: ${SOLO_NODE_URL}`);
    console.log(`💼 Funded Wallets:`);
    console.log(`  Deployer: ${ethers.formatEther(await contract.balanceOf(deployerWallet.address))} B3TR`);
    console.log(`  Distributor: ${ethers.formatEther(distributorBalance)} B3TR`);
    console.log(`  App Fund: ${ethers.formatEther(appFundBalance)} B3TR`);
    
    console.log('\n📋 Next Steps:');
    console.log('1. Update ReCircle .env with:');
    console.log(`   SOLO_NODE_URL=${SOLO_NODE_URL}`);
    console.log(`   B3TR_CONTRACT_ADDRESS=${contractAddress}`);
    console.log('2. Test B3TR distribution with ReCircle');
    console.log('3. Check VeWorld wallet for token visibility');
    
    return {
      contractAddress,
      deployerAddress: deployerWallet.address,
      soloNodeUrl: SOLO_NODE_URL,
      success: true
    };
    
  } catch (error) {
    console.error('❌ Deployment failed:', error.message);
    console.error('Full error:', error);
    return { success: false, error: error.message };
  }
}

// Run deployment
if (import.meta.url === `file://${process.argv[1]}`) {
  deployB3TRContract()
    .then(result => {
      if (result.success) {
        console.log('\n✅ Ready for ReCircle testing!');
        process.exit(0);
      } else {
        console.log('\n❌ Deployment failed');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('Script error:', error);
      process.exit(1);
    });
}

export default deployB3TRContract;